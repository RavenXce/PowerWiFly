{\rtf1\ansi\ansicpg1252\cocoartf1187
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww16640\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 Communication Protocol PowerWiFly:\
\
1. In this scenario, we assume that the user is an average dude who just connected his system to his own wi-fi network. He doesn't know anything about port-fowarding, or configuring his router or anything like that. His wi-fi network is a home network, where the public IP address of the router may change every few days (thats how Starhub does it at least)\
\
2. Normally, in order to send data directly to the WiFly device connected to the user's home network, we have to do port forwarding, where data coming to the router, is forwarded to the IP-Address of the WiFly device. This is called NAT. This is complicated because:\
	-We don't know the IP-Address of the user's router, and it may keep changing\
	-The internal IP address of the wifly may change and the port forward settings must be changed again\
	-User has to meddle with his router, not cool\
\
3. The solution is to make the WiFly send a packet of data to the server. The server, has a fixed DNS and port. If we send data to the server's address and port, it is guaranteed to be received, as we can set-up the server to listen to responses coming to that particular port from any IP address.\
\
The php-script, C# socket code, is able to print out both the response received, and exactly where it came from (IP and port). Based on my testing, sending a return packet back to this IP and port was successful! \
\
4. Hence, my solution is as such:\
	-Code a C# Application that listens to a port (http://stackoverflow.com/questions/12864999/sending-and-receiving-udp-packets) and run it in a loop on my server.\
	-Every time the arduino/wifly turns on, it will send a packet of data to the server port and address with like say it's name "Machine1" or whatever\
	-The C# app will save the response IP address and port.\
	-Next time it needs to send data to the wifely device, simply send back to the saved addresses.\
	(You may want to code the arduino to send a return response etc. We will have to do some testing to see if the IP Address or port changes over time)\
\
5. FINALLY, this is a full step by step process on how this will work\
	-Arduino sends a response "Machine1: Ready" the first time it turns on\
	-C# App receives this, and saves the response IP and port in a file\
	-iPhone/Windows App sends a response to the server to turn on 2 switches. response example: "AppUser1: Machine1: 0110"\
	-C# app receives response, reads machine1 and app\
	-C# app saves the ip and port of the app/user\
	-C# app sends response to the saved Machine1 port and address "0110"\
	-WiFly receives it and turns it on\
	-WiFly sends back an "OK" response back to server "Machine1: OK"\
	-C# App receives it, sends it back to the app "AppUser1: okay"\
	-Done\
\
6. Several things to point out\
	-As you can see working in the UDP paradigm is hard and you have to do your own handshaking, but the results are almost instantaneous. If I had used TCP/HTTP however, it would be much slower, as I would have to open a port to the server from the wifly, and keep it open until i receive a response. this may result in a time-out if no response is received, and i would have to re-open the port every time i receive a response.\
	-Can use PHP, but using a C# app to manage is WAY easier. Reason is because running a PHP script in a loop is more resource hogging than i thought, and every 60s or so it would time-out if no response was received, and I would have to use a windows timer to re-open the script. very bad. C# windows app is much better. \
\
	}